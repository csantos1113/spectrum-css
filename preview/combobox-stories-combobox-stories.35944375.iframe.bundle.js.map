{"version":3,"file":"combobox-stories-combobox-stories.35944375.iframe.bundle.js","mappings":";;;AAqDA;AASA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAEA;AACA;AAMA;;AAOA;;AAKA;;ACpEA;AAQA;;;AASA;AACA;AASA;;AAKA;;ACuIA;AAQA;AACA;AACA;AACA;AACA;;AAEA;;AAxDA;;AAEA;;AAGA;;AAEA;AACA;AAEA;;AAqDA;;AAnLA;AAWA;AACA;AACA;AACA;AACA;AACA;AAUA;AAUA;AAIA;AAKA;;AAGA;AAGA;AAWA;AAWA;AAWA;AAGA;AAEA;AAQA;AAEA;;AAiFA;;;;AChLA;AAeA;AACA;;AAEA;AACA;;AAMA;AACA;AAEA;AACA;AAEA;;;AAQA;AClCA;;;AAmFA;AASA;;AAEA;AACA;;AAEA;AACA;;AAMA;;ACjHA;;;;;;;;;;;;;;;;AAwBA;AACA;AAGA;;ACrCA;AAQA;;AAEA;AACA;AACA;AAEA;AACA;;AAGA;;ACSA;AAeA;AACA;AACA;AAMA;;AAOA;AAaA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAQA;;AC3FA;AAcA;;AAEA;;AAiFA","sources":["webpack://@spectrum-css/preview/../../components/checkbox/stories/template.js","webpack://@spectrum-css/preview/../../components/divider/stories/template.js","webpack://@spectrum-css/preview/../../components/menu/stories/template.js","webpack://@spectrum-css/preview/../../components/pickerbutton/stories/template.js","webpack://@spectrum-css/preview/../../components/popover/stories/template.js","webpack://@spectrum-css/preview/../../components/progresscircle/stories/template.js","webpack://@spectrum-css/preview/../../components/switch/stories/template.js","webpack://@spectrum-css/preview/../../components/textfield/stories/template.js","webpack://@spectrum-css/preview/../../components/combobox/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { useArgs } from \"@storybook/client-api\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Checkbox\",\n\tsize = \"m\",\n\tlabel,\n\tisChecked = false,\n\tisEmphasized = false,\n\tisIndeterminate = false,\n\tisDisabled = false,\n\ttitle,\n\tvalue,\n\tid,\n\tcustomClasses = [],\n\t...globals\n}) => {\n\tconst [_, updateArgs] = useArgs();\n\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tlet iconSize = \"75\";\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\ticonSize = \"50\";\n\t\t\tbreak;\n\t\tcase \"l\":\n\t\t\ticonSize = \"100\";\n\t\t\tbreak;\n\t\tcase \"xl\":\n\t\t\ticonSize = \"200\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ticonSize = \"75\";\n\t}\n\n\treturn html`\n\t\t<label\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--emphasized`]: isEmphasized,\n\t\t\t\t[`is-indeterminate`]: isIndeterminate,\n\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t>\n\t\t\t<input\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tclass=\"${rootClass}-input\"\n\t\t\t\t?checked=${isChecked}\n\t\t\t\t?disabled=${isDisabled}\n\t\t\t\ttitle=${ifDefined(label || title)}\n\t\t\t\tvalue=${ifDefined(value)}\n\t\t\t\t@change=${() => {\n\t\t\t\t\tif (isDisabled) return;\n\t\t\t\t\tupdateArgs({ isChecked: !isChecked });\n\t\t\t\t}}\n\t\t\t\tid=${id}\n\t\t\t/>\n\t\t\t<span class=\"${rootClass}-box\">\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: `Checkmark${iconSize}`,\n\t\t\t\t\tcustomClasses: [`${rootClass}-checkmark`],\n\t\t\t\t})}\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: `Dash${iconSize}`,\n\t\t\t\t\tcustomClasses: [`${rootClass}-partialCheckmark`],\n\t\t\t\t})}\n\t\t\t</span>\n\t\t\t${when(\n\t\t\t\tlabel,\n\t\t\t\t() => html`<span class=\"${rootClass}-label\">${label}</span>`\n\t\t\t)}\n\t\t</label>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\n\nimport { upperCase, lowerCase, capitalize } from \"lodash-es\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Divider\",\n\tsize = \"m\",\n\ttag = \"hr\",\n\tstaticColor,\n\tvertical = false,\n\tcustomClasses = [],\n\t...globals\n}) => {\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tif (tag === \"hr\") {\n\t\treturn html`\n    <hr\n      class=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${upperCase(size)}`]: typeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--vertical`]: vertical === true,\n\t\t\t\t[`${rootClass}--static${capitalize(lowerCase(staticColor))}`]:\n\t\t\t\t\ttypeof staticColor !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n      style=${\n\t\t\t\tvertical === true\n\t\t\t\t\t? \"min-height: 20px; height: auto; align-self: stretch\"\n\t\t\t\t\t: \"\"\n\t\t\t}\n      role=\"separator\"\n      >\n    </hr>`;\n\t} else {\n\t\treturn html` <div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--vertical`]: vertical === true,\n\t\t\t\t[`${rootClass}--static${capitalize(lowerCase(staticColor))}`]:\n\t\t\t\t\ttypeof staticColor !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${vertical === true\n\t\t\t\t? \"min-height: 20px; height: auto; align-self: stretch\"\n\t\t\t\t: \"\"}\n\t\t\trole=\"separator\"\n\t\t></div>`;\n\t}\n};\n","import { html, css } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nimport { Template as Divider } from \"@spectrum-css/divider/stories/template.js\";\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\nimport { Template as Checkbox } from \"@spectrum-css/checkbox/stories/template.js\";\nimport { Template as Switch } from \"@spectrum-css/switch/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const MenuItem = ({\n  rootClass,\n  label,\n  description,\n  iconName,\n  isHighlighted = false,\n  isActive = false,\n  isSelected = false,\n  isDisabled = false,\n  isChecked = false,\n  isFocused = false,\n  isDrillIn = false,\n  isCollapsible = false,\n  isOpen = false,\n  role = \"menuitem\",\n  items = [],\n  size,\n  id,\n  hasActions,\n  selectionMode,\n  value,\n  ...globals\n}) => {\n  return html`\n    <li\n      class=${classMap({\n        [`${rootClass}`]: true,\n        \"is-highlighted\": isHighlighted,\n        \"is-active\": isActive,\n        \"is-focused\": isFocused,\n        \"is-selected\": isSelected,\n        \"is-disabled\": isDisabled,\n        [`${rootClass}--drillIn`]: isDrillIn,\n        [`${rootClass}--collapsible`]: isCollapsible,\n        \"is-open\": isOpen,\n      })}\n      id=${ifDefined(id)}\n      role=${ifDefined(role)}\n      aria-selected=${isSelected ? \"true\" : \"false\"}\n      aria-disabled=${isDisabled ? \"true\" : \"false\"}\n      tabindex=${ifDefined(!isDisabled ? \"0\" : undefined)}>\n      ${isCollapsible\n        ? Icon({\n            ...globals,\n            iconName: \"ChevronRight100\",\n            size,\n            customClasses: [\n              `${rootClass}Icon`,\n              \"spectrum-Menu-chevron\",\n            ],\n          }) : ''}\n      ${iconName\n        ? Icon({\n            ...globals,\n            iconName,\n            size,\n            customClasses: [\n              `${rootClass}Icon`,\n              `${rootClass}Icon--workflowIcon`\n            ] \n          }) : ''}\n      ${isCollapsible\n        ? html`<span class=\"spectrum-Menu-sectionHeading\">${label}</span>`\n        : ''\n      }\n      ${selectionMode != \"multiple\" && !isCollapsible\n        ? html`<span class=${classMap({\n          [`${rootClass}Label`]: true,\n          ['spectrum-Switch-label']: hasActions,\n          })}>\n          ${label}\n        </span>`\n        : ''}\n      ${typeof description != \"undefined\" \n        ? html`<span class=\"${rootClass}Description\">${description}</span>`\n        : ''}\n      ${isDrillIn\n        ? Icon({\n            ...globals,\n            iconName: \"ChevronRight100\",\n            size,\n            customClasses: [\n              `${rootClass}Icon`,\n              \"spectrum-Menu-chevron\",\n            ],\n          })\n        : ''}\n      ${selectionMode == \"multiple\" \n        ? Checkbox({\n          ...globals,\n          size,\n          isEmphasized: true,\n          label: label,\n          customClasses: [\n            `${rootClass}Checkbox`,\n          ],\n        })\n      : ''}\n      ${isChecked && selectionMode != \"multiple\"\n        ? Icon({\n            ...globals,\n            iconName: \"Checkmark100\",\n            size,\n            customClasses: [\n              `${rootClass}Icon`,\n              \"spectrum-Menu-checkmark\",\n            ],\n          })\n        : ''}\n        ${value\n          ? html`<span class=\"${rootClass}Value\">${value}</span>`\n          : ''}\n        ${hasActions\n          ? html`<div class=\"${rootClass}Actions\">\n          ${Switch({\n              ...globals,\n              size,\n              label: null,\n              customClasses: [\n                `${rootClass}Switch`,\n              ],\n            })}\n            </div>`\n          : ''}\n      ${isCollapsible && items.length > 0 ? Template({ ...globals, items, isOpen, size }) : ''}\n    </li>\n  `\n};\n\nexport const MenuGroup = ({\n  heading,\n  id,\n  idx = 0,\n  items = [],\n  isDisabled = false,\n  isSelectable = false,\n  subrole,\n  size,\n  ...globals\n}) => html`\n    <li\n      id=${ifDefined(id)}\n      role=\"presentation\">\n      ${heading\n        ? html`<span\n            class=\"spectrum-Menu-sectionHeading\"\n            id=${id ?? `menu-heading-category-${idx}`}\n            aria-hidden=\"true\"\n            >${heading}</span\n          >`\n        : \"\"}\n      ${Template({\n        ...globals,\n        role: \"group\",\n        subrole,\n        labelledby: id,\n        items,\n        isDisabled,\n        isSelectable,\n        size,\n      })}\n    </li>\n  `;\n\nexport const Template = ({\n  rootClass = \"spectrum-Menu\",\n  labelledby,\n  customClasses = [],\n  customStyles = {},\n  size,\n  isDisabled = false,\n  selectionMode = \"none\",\n  isOpen = false,\n  hasActions = false,\n  items = [],\n  role = \"menu\",\n  subrole = \"menuitem\",\n  id,\n  ...globals\n}) => {\n\n  return html`\n    <ul\n      class=${classMap({\n        [rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]: typeof size !== \"undefined\",\n        \"is-selectable\": selectionMode === \"single\",\n        \"is-selectableMultiple\": selectionMode === \"multiple\",\n        \"is-open\": isOpen,\n        ...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n      })}\n      id=${ifDefined(id)}\n      role=${ifDefined(role)}\n      aria-labelledby=${ifDefined(labelledby)}\n      aria-disabled=${isDisabled ? \"true\" : \"false\"}\n      style=${styleMap(customStyles)}\n    >\n      ${items.map((i, idx) => {\n        if (i.type === \"divider\")\n          return Divider({\n            ...globals,\n            tag: \"li\",\n            size: \"s\",\n            customClasses: [`${rootClass}-divider`],\n          });\n        else if (i.heading) return MenuGroup({ ...i, ...globals, subrole, size, selectionMode });\n        else\n          return MenuItem({\n            ...globals,\n            ...i,\n            rootClass: `${rootClass}-item`,\n            role: subrole,\n            size,\n            selectionMode,\n            hasActions,\n          });\n      })}\n    </ul>\n  `;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nimport { useArgs } from \"@storybook/client-api\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\tid,\n\trootClass = \"spectrum-PickerButton\",\n\tsize = \"m\",\n\tlabel,\n\tposition,\n\ticonType = \"ui\",\n\ticonName = \"ChevronDown\",\n\tisDisabled = false,\n\tisFocused = false,\n\tisOpen = false,\n\tisQuiet = false,\n\tcustomClasses = [],\n\tisRounded = false,\n\tcustomStyles = {},\n\tonclick,\n\t...globals\n}) => {\n\tconst [_, updateArgs] = useArgs();\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\treturn html`\n\t\t<button\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--textuiicon`]: label && iconType === \"ui\",\n\t\t\t\t[`${rootClass}--uiicononly`]: !label && iconType === \"ui\",\n\t\t\t\t[`${rootClass}--icononly`]: !label && iconType !== \"ui\",\n\t\t\t\t[`${rootClass}--${position}`]: typeof position !== \"undefined\",\n\t\t\t\t[`${rootClass}--rounded`]: isRounded,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t\"is-disabled\": isDisabled,\n\t\t\t\t\"is-focused\": isFocused,\n\t\t\t\t\"is-open\": isOpen && !isDisabled,\n\t\t\t\t[`${rootClass}--quiet`]: isQuiet,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t\tid=${ifDefined(id)}\n\t\t\taria-haspopup=\"listbox\"\n\t\t\t?disabled=${isDisabled}\n\t\t\t@click=${onclick ??\n\t\t\tfunction () {\n\t\t\t\tif (isDisabled) return;\n\t\t\t\tupdateArgs({ isOpen: !isOpen });\n\t\t\t}}\n\t\t>\n\t\t\t<div class=\"${rootClass}-fill\">\n\t\t\t\t${label\n\t\t\t\t\t? html`<span class=\"${rootClass}-label is-placeholder\"\n\t\t\t\t\t\t\t>${label}</span\n\t\t\t\t\t  >`\n\t\t\t\t\t: \"\"}\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\ticonName: iconName ?? \"ChevronDown\",\n\t\t\t\t\tsize,\n\t\t\t\t\tcustomClasses: [`${rootClass}-icon`],\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</button>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { useArgs } from \"@storybook/client-api\";\n\nimport \"@spectrum-css/popover\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Popover\",\n\tsize = \"m\",\n\tisOpen = false,\n\twithTip = false,\n\tposition = \"top\",\n\tcustomClasses = [],\n\tid = \"popover-1\",\n\ttestId,\n\ttriggerId = \"trigger\",\n\tcustomStyles = {\n\t\t\"--spectrum-popover-offset\": \"8px\",\n\t\t\"inset-inline-start\": \"0px\",\n\t\t\"inset-block-start\": \"0px\",\n\t},\n\ttrigger,\n\tcontent = [],\n\t...globals\n}) => {\n\tconst [, updateArgs] = useArgs();\n\n\tif (content.length === 0) {\n\t\tconsole.warn(\"Popover: No content provided.\");\n\t\treturn html``;\n\t}\n\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\treturn html`\n\t\t${when(typeof trigger === \"function\", () => trigger({\n\t\t\t...globals,\n\t\t\tisSelected: isOpen,\n\t\t\tonclick: () => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t// No trigger? Nothing to do.\n\t\t\t\tif (!trigger || !position) return [];\n\n\t\t\t\t// Get trigger element and popover\n\t\t\t\tconst element = document.querySelector(`#${triggerId}`);\n\n\t\t\t\tif (!element) return [];\n\t\t\t\tconst rect = element.getBoundingClientRect();\n\t\t\t\tconst popover = document.querySelector(`#${id}`);\n\t\t\t\tif (!popover) return [];\n\n\t\t\t\tconst transforms = [];\n\t\t\t\tconst additionalStyles = {};\n\t\t\t\tconst triggerXCenter = (rect.left + rect.right) / 2;\n\t\t\t\tconst triggerYCenter = (rect.top + rect.bottom) / 2;\n\t\t\t\tconst popWidth = popover.offsetWidth ?? 0;\n\t\t\t\tconst popHeight = popover.offsetHeight ?? 0;\n\t\t\t\tconst textDir = getComputedStyle(document.querySelector('html')).direction;\n\t\t\t\tlet x, y;\n\t\t\t\tlet xOffset = \"+ 0px\";\n\t\t\t\tlet yOffset = \"+ 0px\";\n\t\t\t\tif (position.includes(\"top\") || position.includes(\"bottom\") && !(position.includes(\"-top\") || position.includes(\"-bottom\"))) {\n\t\t\t\t\tx = triggerXCenter - (popWidth > 0 ? popWidth / 2 : popWidth);\n\t\t\t\t} \n\t\t\t\tif (position.includes(\"left\") || position.includes(\"right\")) {\n\t\t\t\t\ty = triggerYCenter - (popHeight > 0 ? popHeight / 2 : popHeight);\n\t\t\t\t}\n\t\t\t\tif (position.includes(\"top\") && !position.includes(\"-top\")) {\n\t\t\t\t\ty = rect.top - popHeight;\n\t\t\t\t\tyOffset = \"- var(--spectrum-popover-offset)\";\n\t\t\t\t} else if (position.includes(\"bottom\") && !position.includes(\"-bottom\")) {\n\t\t\t\t\ty = rect.bottom;\n\t\t\t\t\tyOffset = \"+ var(--spectrum-popover-offset)\";\n\t\t\t\t} else if (position.includes(\"left\")) {\n\t\t\t\t\tif (textDir == 'rtl') {\n\t\t\t\t\t\tx = rect.right;\n\t\t\t\t\t\txOffset = \"+ var(--spectrum-popover-offset)\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = rect.left - popWidth;\n\t\t\t\t\t\txOffset = \"- var(--spectrum-popover-offset)\";\n\t\t\t\t\t}\n\t\t\t\t} else if (position.includes(\"right\")) {\n\t\t\t\t\tif (textDir == 'rtl') {\n\t\t\t\t\t\tx = rect.left - popWidth;\n\t\t\t\t\t\txOffset = \"- var(--spectrum-popover-offset)\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = rect.right;\n\t\t\t\t\t\txOffset = \"+ var(--spectrum-popover-offset)\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (x) transforms.push(`translateX(calc(var(--flow-direction) * calc(${parseInt(x, 10)}px ${xOffset})))`);\n\t\t\t\tif (y) transforms.push(`translateY(calc(${y}px ${yOffset}))`);\n\n\t\t\t\t// Add start and end styles\n\t\t\t\tif (position === \"top-start\" || position === \"bottom-start\") {\n\t\t\t\t\tadditionalStyles[\"inset-inline-start\"] = \"calc(\" + (popWidth / 2) + \"px - var(--spectrum-popover-pointer-edge-offset))\";\n\t\t\t\t} else if (position === \"top-end\" || position === \"bottom-end\") {\n\t\t\t\t\tadditionalStyles[\"inset-inline-start\"] = \"calc(-1 *\" + (popWidth / 2) + \"px + var(--spectrum-popover-pointer-edge-offset))\";\n\t\t\t\t} else if (position === \"left-top\" || position === \"right-top\") {\n\t\t\t\t\tadditionalStyles[\"inset-block-start\"] = \"calc(\" + (popHeight / 2) + \"px - var(--spectrum-popover-pointer-edge-offset))\";\n\t\t\t\t} else if (position === \"left-bottom\" || position === \"right-bottom\") {\n\t\t\t\t\tadditionalStyles[\"inset-block-start\"] = \"calc(-1 *\" + (popHeight / 2) + \"px + var(--spectrum-popover-pointer-edge-offset))\";\n\t\t\t\t}\n\n\t\t\t\tupdateArgs({\n\t\t\t\t\tisOpen: !isOpen,\n\t\t\t\t\tcustomStyles: {\n\t\t\t\t\t\t...customStyles,\n\t\t\t\t\t\ttransform: transforms.join(\" \"),\n\t\t\t\t\t\t...additionalStyles,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, 100)\n\t\t\t}\n\t\t}))}\n\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t\"is-open\": isOpen,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--withTip`]: withTip,\n\t\t\t\t[`${rootClass}--${position}`]: typeof position !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t\trole=\"presentation\"\n\t\t\tid=${ifDefined(id)}\n\t\t\tdata-testid=${ifDefined(testId)}\n\t\t>\n\t\t\t${content.map((c) => (typeof c === \"function\" ? c({}) : c))}\n\t\t\t${withTip\n\t\t\t\t? position && [\"top\", \"bottom\"].some((e) => position.startsWith(e))\n\t\t\t\t\t? html`<svg class=\"${rootClass}-tip\" viewBox=\"0 -0.5 16 9\" width=\"10\"><path class=\"${rootClass}-tip-triangle\" d=\"M-1,-1 8,8 17,-1\"></svg>`\n\t\t\t\t\t: html`<svg class=\"${rootClass}-tip\" viewBox=\"0 -0.5 9 16\" width=\"10\"><path class=\"${rootClass}-tip-triangle\" d=\"M-1,-1 8,8 -1,17\"></svg>`\n\t\t\t\t: \"\"}\n\t\t</div>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\n// import { ifDefined } from 'lit/directives/if-definedjs';\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-ProgressCircle\",\n\tcustomClasses = [],\n\tsize = \"m\",\n\toverBackground = false,\n\tisIndeterminate = false,\n\t...globals\n}) => {\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tlet sizeClassName = \"medium\";\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\tsizeClassName = \"small\";\n\t\t\tbreak;\n\t\tcase \"l\":\n\t\t\tsizeClassName = \"large\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tsizeClassName = \"medium\";\n\t}\n\n\tconst componentMarkup = html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--${sizeClassName}`]: typeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--indeterminate`]: isIndeterminate,\n\t\t\t\t[`${rootClass}--staticWhite`]: overBackground,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t>\n\t\t\t<div class=\"spectrum-ProgressCircle-track\"></div>\n\t\t\t<div class=\"spectrum-ProgressCircle-fills\">\n\t\t\t\t<div class=\"spectrum-ProgressCircle-fillMask1\">\n\t\t\t\t\t<div class=\"spectrum-ProgressCircle-fillSubMask1\">\n\t\t\t\t\t\t<div class=\"spectrum-ProgressCircle-fill\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"spectrum-ProgressCircle-fillMask2\">\n\t\t\t\t\t<div class=\"spectrum-ProgressCircle-fillSubMask2\">\n\t\t\t\t\t\t<div class=\"spectrum-ProgressCircle-fill\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`;\n\n\tconst decoratedMarkup = html`\n\t\t<div style=\"background-color: #0F797D;\">${componentMarkup}</div>\n\t`;\n\n\treturn overBackground ? decoratedMarkup : componentMarkup;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Switch\",\n\tsize = \"m\",\n\tlabel = \"Switch label\",\n\tisDisabled,\n\tisChecked,\n\tisEmphasized,\n\tcustomClasses = [],\n\tid,\n\t...globals\n}) => {\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--disabled`] : isDisabled,\n\t\t\t\t[`${rootClass}--emphasized`] : isEmphasized,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t>\n\t\t\t<input type=\"checkbox\" class=\"${rootClass}-input\" id=\"switch-onoff-0\" ?disabled=${isDisabled} ?checked=${isChecked}/>\n\t\t\t<span class=\"${rootClass}-switch\"></span>\n\t\t\t${label\n\t\t\t\t? html`<label class=\"${rootClass}-label\" for=\"switch-onoff-0\"\n\t\t\t\t\t\t>${label}</label\n\t\t\t\t  >`\n\t\t\t\t: \"\"}\n\t\t</div>\n\t`;\n};\n","import { html } from \"lit\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { useArgs } from \"@storybook/client-api\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\nimport { Template as ProgressCircle } from \"@spectrum-css/progresscircle/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Textfield\",\n\tsize = \"m\",\n\tcustomClasses = [],\n\tcustomInputClasses = [],\n\tcustomIconClasses = [],\n\tcustomProgressCircleClasses = [],\n\tisInvalid = false,\n\tisValid = false,\n\tmultiline = false,\n\tgrows = false,\n\tisQuiet = false,\n\tisFocused = false,\n\tisDisabled = false,\n\tisRequired = false,\n\tisReadOnly = false,\n\tisKeyboardFocused = false,\n\tisLoading = false,\n\tpattern,\n\tplaceholder,\n\tname,\n\ticonName,\n\tvalue,\n\ttype = \"text\",\n\tautocomplete = true,\n\tonclick,\n\tstyles = {},\n\t...globals\n}) => {\n\tconst [, updateArgs] = useArgs();\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tif (isInvalid) iconName = \"Alert\";\n\telse if (isValid) iconName = \"Checkmark\";\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--multiline`]: multiline,\n\t\t\t\t[`${rootClass}--grows`]: grows,\n\t\t\t\t[`${rootClass}--quiet`]: isQuiet,\n\t\t\t\t\"is-invalid\": isInvalid,\n\t\t\t\t\"is-valid\": isValid,\n\t\t\t\t\"is-focused\": isFocused,\n\t\t\t\t\"is-keyboardFocused\": isKeyboardFocused,\n\t\t\t\t\"is-disabled\": isDisabled,\n\t\t\t\t\"is-readOnly\": isReadOnly,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${ifDefined(styleMap(styles))}\n\t\t\t@click=${onclick}\n\t\t\t@focusin=${(e) => {\n\t\t\t\tconst focusClass = e.target?.classList?.contains(\"focus-ring\")\n\t\t\t\t\t? { isKeyboardFocused: true }\n\t\t\t\t\t: { isFocused: true };\n\t\t\t\tupdateArgs(focusClass);\n\t\t\t}}\n\t\t\t@focusout=${(e) => {\n\t\t\t\tconst focusClass = e.target?.classList?.contains(\"focus-ring\")\n\t\t\t\t\t? { isKeyboardFocused: false }\n\t\t\t\t\t: { isFocused: false };\n\t\t\t\tupdateArgs(focusClass);\n\t\t\t}}\n\t\t>\n\t\t\t${iconName\n\t\t\t\t? Icon({\n\t\t\t\t\t\t...globals,\n\t\t\t\t\t\tsize,\n\t\t\t\t\t\ticonName,\n\t\t\t\t\t\tcustomClasses: [\n\t\t\t\t\t\t\t!!(isInvalid || isValid)\n\t\t\t\t\t\t\t\t? `${rootClass}-validationIcon`\n\t\t\t\t\t\t\t\t: `${rootClass}-icon`,\n\t\t\t\t\t\t\t...customIconClasses,\n\t\t\t\t\t\t],\n\t\t\t\t  })\n\t\t\t\t: \"\"}\n\t\t\t${multiline\n\t\t\t\t? html` <textarea\n\t\t\t\t\t\tplaceholder=${ifDefined(placeholder)}\n\t\t\t\t\t\tname=${ifDefined(name)}\n\t\t\t\t\t\t.value=${ifDefined(value)}\n\t\t\t\t\t\tautocomplete=${autocomplete ? undefined : \"off\"}\n\t\t\t\t\t\t?required=${isRequired}\n\t\t\t\t\t\t?disabled=${isDisabled}\n\t\t\t\t\t\t?readonly=${ifDefined(isReadOnly)}\n\t\t\t\t\t\tpattern=${ifDefined(pattern)}\n\t\t\t\t\t\tclass=${classMap({\n\t\t\t\t\t\t\t[`${rootClass}-input`]: true,\n\t\t\t\t\t\t\t...customInputClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t\t\t})}\n\t\t\t\t  />`\n\t\t\t\t: html` <input\n\t\t\t\t\t\ttype=${ifDefined(type)}\n\t\t\t\t\t\tplaceholder=${ifDefined(placeholder)}\n\t\t\t\t\t\tname=${ifDefined(name)}\n\t\t\t\t\t\tvalue=${ifDefined(value)}\n\t\t\t\t\t\tautocomplete=${autocomplete ? undefined : \"off\"}\n\t\t\t\t\t\t?required=${isRequired}\n\t\t\t\t\t\t?disabled=${isDisabled}\n\t\t\t\t\t\treadonly=${ifDefined(isReadOnly ? \"readonly\" : undefined)}\n\t\t\t\t\t\tpattern=${ifDefined(pattern)}\n\t\t\t\t\t\tclass=${classMap({\n\t\t\t\t\t\t\t[`${rootClass}-input`]: true,\n\t\t\t\t\t\t\t...customInputClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t\t\t})}\n\t\t\t\t  />`}\n\t\t\t${isLoading\n\t\t\t\t? ProgressCircle({\n\t\t\t\t\t\tisIndeterminate: true,\n\t\t\t\t\t\tsize: \"s\",\n\t\t\t\t\t\tcustomClasses: customProgressCircleClasses,\n\t\t\t\t  })\n\t\t\t\t: \"\"}\n\t\t</div>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nimport { Template as Menu } from \"@spectrum-css/menu/stories/template.js\";\nimport { Template as TextField } from \"@spectrum-css/textfield/stories/template.js\";\nimport { Template as Popover } from \"@spectrum-css/popover/stories/template.js\";\nimport { Template as PickerButton } from \"@spectrum-css/pickerbutton/stories/template.js\";\n\nimport { useArgs, useGlobals } from \"@storybook/client-api\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Combobox\",\n\tid,\n\tcontent,\n\tcustomClasses = [],\n\tsize = \"m\",\n\tisOpen = true,\n\tisInvalid = false,\n\tisValid = false,\n\tisQuiet = false,\n\tisDisabled = false,\n\tisFocused = false,\n\tisKeyboardFocused = false,\n\tisLoading = false,\n\tisRequired = false,\n\treadOnly = false,\n\t...globals\n}) => {\n\tconst [_, updateArgs] = useArgs();\n\tconst [{ lang }] = useGlobals();\n\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t\"is-open\": !isDisabled && isOpen,\n\t\t\t\t[`${rootClass}--quiet`]: isQuiet,\n\t\t\t\t\"is-invalid\": !isDisabled && isInvalid,\n\t\t\t\t\"is-valid\": !isDisabled && isValid,\n\t\t\t\t\"is-focused\": !isDisabled && isFocused,\n\t\t\t\t\"is-keyboardFocused\": !isDisabled && isKeyboardFocused,\n\t\t\t\t\"is-loading\": isLoading,\n\t\t\t\t\"is-disabled\": isDisabled,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t>\n\t\t\t${[\n\t\t\t\tTextField({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\tisQuiet,\n\t\t\t\t\tisDisabled,\n\t\t\t\t\tisValid,\n\t\t\t\t\tisInvalid,\n\t\t\t\t\tisFocused,\n\t\t\t\t\tisKeyboardFocused,\n\t\t\t\t\tcustomClasses: [\n\t\t\t\t\t\t`${rootClass}-textfield`,\n\t\t\t\t\t\t...(isLoading ? [\"is-loading\"] : []),\n\t\t\t\t\t],\n\t\t\t\t\tcustomInputClasses: [`${rootClass}-input`],\n\t\t\t\t\tisLoading,\n\t\t\t\t\tcustomProgressCircleClasses: [\"spectrum-Combobox-progress-circle\"],\n\t\t\t\t\tplaceholder: \"Type here\",\n\t\t\t\t\tname: \"field\",\n\t\t\t\t\tvalue: globals.selectedDay\n\t\t\t\t\t\t? new Date(globals.selectedDay).toLocaleDateString(lang)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tonclick: function () {\n\t\t\t\t\t\tif (!isOpen) updateArgs({ isOpen: true });\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tPickerButton({\n\t\t\t\t\t...globals,\n\t\t\t\t\tcustomClasses: [`${rootClass}-button`],\n\t\t\t\t\tsize,\n\t\t\t\t\ticonType: \"workflow\",\n\t\t\t\t\ticonName: \"ChevronDown\",\n\t\t\t\t\tisQuiet,\n\t\t\t\t\tisOpen,\n\t\t\t\t\tisInvalid,\n\t\t\t\t\tisValid,\n\t\t\t\t\tisFocused,\n\t\t\t\t\tisKeyboardFocused,\n\t\t\t\t\tisDisabled,\n\t\t\t\t\tposition: \"right\",\n\t\t\t\t\tonclick: function () {\n\t\t\t\t\t\tupdateArgs({ isOpen: !isOpen });\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tPopover({\n\t\t\t\t\t...globals,\n\t\t\t\t\tisOpen: isOpen && !isDisabled,\n\t\t\t\t\twithTip: false,\n\t\t\t\t\tposition: \"bottom\",\n\t\t\t\t\tisQuiet,\n\t\t\t\t\tcustomStyles: isOpen\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\t\t\ttop: \"100%\",\n\t\t\t\t\t\t\t\tleft: \"0\",\n\t\t\t\t\t\t\t\twidth: \"100%\",\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: {},\n\t\t\t\t\tcontent: [\n\t\t\t\t\t\tMenu({\n\t\t\t\t\t\t\t...globals,\n\t\t\t\t\t\t\titems: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: \"Ballard\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: \"Fremont\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: \"Greenwood\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: \"United States of America\",\n\t\t\t\t\t\t\t\t\tisDisabled: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t}),\n\t\t\t\t\t],\n\t\t\t\t}),\n\t\t\t]}\n\t\t</div>\n\t`;\n};\n"],"names":[],"sourceRoot":""}