{"version":3,"file":"colorwheel-stories-colorwheel-stories.d0611d57.iframe.bundle.js","mappings":";;AAkBA;;ACmBA;AAIA;AACA;AACA;AAKA;;AAEA;AAIA;AACA;AACA;AACA;;;ACxCA;AAMA;AACA;;AAEA;AAIA;;;AAMA;AAMA","sources":["webpack://@spectrum-css/preview/../../components/colorhandle/stories/template.js","webpack://@spectrum-css/preview/../../components/opacitycheckerboard/stories/template.js","webpack://@spectrum-css/preview/../../components/colorwheel/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { Template as OpacityCheckerboard } from \"@spectrum-css/opacitycheckerboard/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-ColorHandle\",\n\tcustomClasses = [],\n\tisDisabled = false,\n\tisFocused = false,\n\tcolorHandleStyle = {\n\t\t\"--spectrum-picked-color\": \"rgba(255, 0, 0, 0.5)\",\n\t},\n\t...globals\n}) => {\n\tconst checkerboardContent = html `<div class=\"${rootClass}-inner\"></div>`\n\n\treturn html`\n\t\t${OpacityCheckerboard({\n\t\t\t...globals,\n\t\t\tcomponentOnly: true,\n\t\t\tcustomClasses: [\n\t\t\t\t`${rootClass}`,\n\t\t\t\t...!isDisabled && isFocused ? [\"is-focused\"] : [],\n\t\t\t\t...isDisabled ? [\"is-disabled\"] : [],\n\t\t\t\t...customClasses,\n\t\t\t],\n\t\t\tcontent: checkerboardContent,\n\t\t\tcheckerBoardStyles: colorHandleStyle,\n\t\t})}`\n}\n","import { html } from \"lit-html\";\nimport { classMap } from \"lit-html/directives/class-map.js\";\nimport { styleMap } from \"lit-html/directives/style-map.js\";\nimport { when } from \"lit-html/directives/when.js\";\nimport { ifDefined } from \"lit-html/directives/if-defined.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-OpacityCheckerboard\",\n\thasColorOverlay,\n\toverlayColor,\n\tbackgroundPosition,\n\tcustomClasses = [],\n\tcontainerStyles = {\n\t\t\"inline-size\": \"100px\",\n\t\t\"block-size\": \"100px\",\n\t},\n\tcheckerBoardStyles = {\n\t\t\"--mod-opacity-checkerboard-position\": backgroundPosition,\n\t},\n\tcolorStyles = {\n\t\t\"background-color\": overlayColor,\n\t\t\"inline-size\": \"100%\",\n\t\t\"block-size\": \"100%\",\n\t\tposition: \"relative\",\n\t\t\"inset-block\": \"-100%\",\n\t},\n\tcomponentOnly,\n\tcontent,\n\trole,\n\t...globals\n}) => {\n\t// Just the component markup. For use by other component's stories.\n\tif (componentOnly){\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tstyle=${styleMap(checkerBoardStyles)}\n\t\t\t\trole=${ifDefined(role)}\n\t\t\t>${content}</div>`;\n\t}\n\n\t// Component with wrapper for Storybook display, and a testing overlay.\n\treturn html`\n\t\t<div style=${styleMap(containerStyles)}>\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tstyle=${styleMap(checkerBoardStyles)}\n\t\t\t\trole=${ifDefined(role)}\n\t\t\t>${content}</div>\n\t\t\t${when(hasColorOverlay, () => {\n\t\t\t\treturn html` <div style=${styleMap(colorStyles)}></div>`;\n\t\t\t})}\n\t\t</div>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { Template as ColorHandle } from \"@spectrum-css/colorhandle/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-ColorWheel\",\n\tcustomClasses = [],\n\tisDisabled = false,\n\tisFocused = false,\n\tcolorHandleStyle = {\n\t\t\"--spectrum-picked-color\": \"rgb(255, 0, 0)\",\n\t},\n\t...globals\n}) => {\n\treturn html`\n    <div class=${classMap({\n\t\t\t[rootClass]: true,\n\t\t\t\"is-disabled\": isDisabled,\n\t\t\t\"is-focused\": isFocused,\n\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t})}>\n      <div class=\"${rootClass}-inner\">\n        <div class=\"${rootClass}-colorarea-container\"></div>\n      </div>\n      <div class=${classMap({\n\t\t\t\t[`${rootClass}-border`]: true,\n\t\t\t\t\"is-disabled\": isDisabled,\n\t\t\t})}>\n        <div class=${classMap({\n\t\t\t\t\t[`${rootClass}-wheel`]: true,\n\t\t\t\t\t\"is-disabled\": isDisabled,\n\t\t\t\t})}>\n        </div>\n      </div>\n      ${ColorHandle({\n\t\t\t\t...globals,\n\t\t\t\tisDisabled,\n\t\t\t\tcustomClasses: [`${rootClass}-handle`],\n\t\t\t\tcolorHandleStyle,\n\t\t\t})}\n      <input type=\"range\" class=\"${rootClass}-slider\" aria-label=\"hue\" min=\"0\" max=\"360\" step=\"\">\n    </div>\n  </div>\n  `;\n};\n"],"names":[],"sourceRoot":""}