{"version":3,"file":"thumbnail-stories-thumbnail-stories.9efeb447.iframe.bundle.js","mappings":";;;AAqCA;AAIA;AACA;AACA;AAKA;;AAEA;AAIA;AACA;AACA;AACA;;;AC5BA;AAEA;AACA;AACA;AACA;AAIA;;AAGA;AASA;AACA;;AAEA;;AASA;;AAGA;AASA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAGA;;AAEA;AAOA;AACA;;AAEA;AAMA","sources":["webpack://@spectrum-css/preview/../../components/opacitycheckerboard/stories/template.js","webpack://@spectrum-css/preview/../../components/thumbnail/stories/template.js"],"sourcesContent":["import { html } from \"lit-html\";\nimport { classMap } from \"lit-html/directives/class-map.js\";\nimport { styleMap } from \"lit-html/directives/style-map.js\";\nimport { when } from \"lit-html/directives/when.js\";\nimport { ifDefined } from \"lit-html/directives/if-defined.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-OpacityCheckerboard\",\n\thasColorOverlay,\n\toverlayColor,\n\tbackgroundPosition,\n\tcustomClasses = [],\n\tcontainerStyles = {\n\t\t\"inline-size\": \"100px\",\n\t\t\"block-size\": \"100px\",\n\t},\n\tcheckerBoardStyles = {\n\t\t\"--mod-opacity-checkerboard-position\": backgroundPosition,\n\t},\n\tcolorStyles = {\n\t\t\"background-color\": overlayColor,\n\t\t\"inline-size\": \"100%\",\n\t\t\"block-size\": \"100%\",\n\t\tposition: \"relative\",\n\t\t\"inset-block\": \"-100%\",\n\t},\n\tcomponentOnly,\n\tcontent,\n\trole,\n\t...globals\n}) => {\n\t// Just the component markup. For use by other component's stories.\n\tif (componentOnly){\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tstyle=${styleMap(checkerBoardStyles)}\n\t\t\t\trole=${ifDefined(role)}\n\t\t\t>${content}</div>`;\n\t}\n\n\t// Component with wrapper for Storybook display, and a testing overlay.\n\treturn html`\n\t\t<div style=${styleMap(containerStyles)}>\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tstyle=${styleMap(checkerBoardStyles)}\n\t\t\t\trole=${ifDefined(role)}\n\t\t\t>${content}</div>\n\t\t\t${when(hasColorOverlay, () => {\n\t\t\t\treturn html` <div style=${styleMap(colorStyles)}></div>`;\n\t\t\t})}\n\t\t</div>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { Template as OpacityCheckerboard } from \"@spectrum-css/opacitycheckerboard/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Thumbnail\",\n\tsize = \"500\",\n\tcustomClasses = [],\n\timageURL,\n\tsvg,\n\taltText,\n\tisCover,\n\tisDisabled,\n\tonclick,\n\tid,\n\tisLayer,\n\tisSelected,\n\tbackgroundColor,\n\tstyles = {\n\t\t\"background-color\": backgroundColor,\n\t},\n\t...globals\n}) => {\n\n\tconst checkerboardContentLayer =  html`\n\t\t${imageURL\n\t\t\t? html`<img\n\t\t\t\t\tclass=\"${rootClass}-image\"\n\t\t\t\t\tsrc=${imageURL}\n\t\t\t\t\talt=${altText}\n\t\t\t\t/>`\n\t\t\t: \"\"}\n\t`\n\n\tif (isLayer)\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t[`${rootClass}--cover`]: isCover,\n\t\t\t\t\t[`${rootClass}-layer`]: isLayer,\n\t\t\t\t\t[`is-selected`]: isSelected,\n\t\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t\t[`${rootClass}--size${size}`]: typeof size !== \"undefined\",\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tid=${ifDefined(id)}\n\t\t\t\t@click=${onclick}\n\t\t\t>\n\t\t\t\t${OpacityCheckerboard({\n\t\t\t\t\t...globals,\n\t\t\t\t\tcomponentOnly: true,\n\t\t\t\t\tcustomClasses: [`${rootClass}-layer-inner`],\n\t\t\t\t\tcontent: checkerboardContentLayer,\n\t\t\t\t})}\n\t\t\t</div>\n\t\t`;\n\n\tif (backgroundColor)\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t[`${rootClass}--cover`]: isCover,\n\t\t\t\t\t[`${rootClass}-layer`]: isLayer,\n\t\t\t\t\t[`is-selected`]: isSelected,\n\t\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t\t[`${rootClass}--size${size}`]: typeof size !== \"undefined\",\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tid=${ifDefined(id)}\n\t\t\t\t@click=${onclick}\n\t\t\t>\n\t\t\t\t<div class=\"${rootClass}-background\" style=${styleMap(styles)}></div>\n\t\t\t\t<div class=\"${rootClass}-image-wrapper\">\n\t\t\t\t\t${imageURL\n\t\t\t\t\t\t? html`<img\n\t\t\t\t\t\t\t\tclass=\"${rootClass}-image\"\n\t\t\t\t\t\t\t\tsrc=${imageURL}\n\t\t\t\t\t\t\t\talt=${altText}\n\t\t\t\t\t\t  />`\n\t\t\t\t\t\t: \"\"}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\tconst checkerboardContent = html`\n\t\t\t<div class=\"${rootClass}-image-wrapper\">\n\t\t\t${imageURL\n\t\t\t\t? html`<img\n\t\t\t\t\t\tclass=\"${rootClass}-image\"\n\t\t\t\t\t\tsrc=${imageURL}\n\t\t\t\t\t\talt=${altText}\n\t\t\t\t\t/>`\n\t\t\t\t: \"\"}\n\t\t\t${svg ? html`${svg}` : \"\"}\n\t\t</div>\n\t`\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--cover`]: isCover,\n\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t[`${rootClass}--size${size}`]: typeof size !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t\t@click=${onclick}\n\t\t>\n\t\t${OpacityCheckerboard({\n\t\t\t...globals,\n\t\t\tcomponentOnly: true,\n\t\t\tcustomClasses: [`${rootClass}`],\n\t\t\tcontent: checkerboardContent,\n\t\t})}\n\t`\n};\n"],"names":[],"sourceRoot":""}